// accordeon
document.addEventListener("DOMContentLoaded", () => {
  const accordeons = document.querySelectorAll(".accordeon__item");
  const accordeonBtn = document.querySelectorAll(".accordeon__btn");
  const navLink = document.querySelectorAll(".menu__item");

  accordeonBtn.forEach((el) => {
    el.addEventListener("click", (e) => {
      // console.log(el);
      const self = e.currentTarget;
      // el.classList.remove("active");
      // const title = self.querySelector(".accordeon__name");
      // const content = self.querySelector(".accordeon__decription");

      for (let i = 0, parent; (parent = accordeons[i]); i++) {
        parent.classList.remove("active");
        parent.onclick = function (e) {
          // console.log(e.target.className + "--");
          if (e.target.className == "btn") {
            // alert(this.className);
            // console.log(this);
            this.classList.toggle("active");
          }
        };
      }

      // .self.classList.toggle("active");
    });
  });

  navLink.forEach((item) => {
    item.addEventListener("click", () => {
      // let url = item.baseURI;
      let hash = item.childNodes[1].innerText;
      // console.log(hash);
      // console.log(hash.toLowerCase());

      accordeons.forEach((el) => {
        el.classList.remove("active");
        // console.log(el);
        const isCob = el.classList.contains(hash.toLowerCase());
        // console.log(isCob);
        while (isCob) {
          el.classList.add("active");
          break;
        }
      });
      // console.dir(item);
    });
  });
});
// ----- END

// Dynamic Adapt v.1
// HTML data-da="where(uniq class name),when(breakpoint),position(digi)"
// e.x. data-da=".item,992,2"
// Andrikanych Yevhen 2020
// https://www.youtube.com/c/freelancerlifestyle

"use strict";

function DynamicAdapt(type) {
  this.type = type;
}

DynamicAdapt.prototype.init = function () {
  const _this = this;
  // массив объектов
  this.оbjects = [];
  this.daClassname = "_dynamic_adapt_";
  // массив DOM-элементов
  this.nodes = document.querySelectorAll("[data-da]");

  // наполнение оbjects объктами
  for (let i = 0; i < this.nodes.length; i++) {
    const node = this.nodes[i];
    const data = node.dataset.da.trim();
    const dataArray = data.split(",");
    const оbject = {};
    оbject.element = node;
    оbject.parent = node.parentNode;
    оbject.destination = document.querySelector(dataArray[0].trim());
    оbject.breakpoint = dataArray[1] ? dataArray[1].trim() : "767";
    оbject.place = dataArray[2] ? dataArray[2].trim() : "last";
    оbject.index = this.indexInParent(оbject.parent, оbject.element);
    this.оbjects.push(оbject);
  }

  this.arraySort(this.оbjects);

  // массив уникальных медиа-запросов
  this.mediaQueries = Array.prototype.map.call(
    this.оbjects,
    function (item) {
      return (
        "(" +
        this.type +
        "-width: " +
        item.breakpoint +
        "px)," +
        item.breakpoint
      );
    },
    this
  );
  this.mediaQueries = Array.prototype.filter.call(
    this.mediaQueries,
    function (item, index, self) {
      return Array.prototype.indexOf.call(self, item) === index;
    }
  );

  // навешивание слушателя на медиа-запрос
  // и вызов обработчика при первом запуске
  for (let i = 0; i < this.mediaQueries.length; i++) {
    const media = this.mediaQueries[i];
    const mediaSplit = String.prototype.split.call(media, ",");
    const matchMedia = window.matchMedia(mediaSplit[0]);
    const mediaBreakpoint = mediaSplit[1];

    // массив объектов с подходящим брейкпоинтом
    const оbjectsFilter = Array.prototype.filter.call(
      this.оbjects,
      function (item) {
        return item.breakpoint === mediaBreakpoint;
      }
    );
    matchMedia.addListener(function () {
      _this.mediaHandler(matchMedia, оbjectsFilter);
    });
    this.mediaHandler(matchMedia, оbjectsFilter);
  }
};

DynamicAdapt.prototype.mediaHandler = function (matchMedia, оbjects) {
  if (matchMedia.matches) {
    for (let i = 0; i < оbjects.length; i++) {
      const оbject = оbjects[i];
      оbject.index = this.indexInParent(оbject.parent, оbject.element);
      this.moveTo(оbject.place, оbject.element, оbject.destination);
    }
  } else {
    for (let i = 0; i < оbjects.length; i++) {
      const оbject = оbjects[i];
      if (оbject.element.classList.contains(this.daClassname)) {
        this.moveBack(оbject.parent, оbject.element, оbject.index);
      }
    }
  }
};

// Функция перемещения
DynamicAdapt.prototype.moveTo = function (place, element, destination) {
  element.classList.add(this.daClassname);
  if (place === "last" || place >= destination.children.length) {
    destination.insertAdjacentElement("beforeend", element);
    return;
  }
  if (place === "first") {
    destination.insertAdjacentElement("afterbegin", element);
    return;
  }
  destination.children[place].insertAdjacentElement("beforebegin", element);
};

// Функция возврата
DynamicAdapt.prototype.moveBack = function (parent, element, index) {
  element.classList.remove(this.daClassname);
  if (parent.children[index] !== undefined) {
    parent.children[index].insertAdjacentElement("beforebegin", element);
  } else {
    parent.insertAdjacentElement("beforeend", element);
  }
};

// Функция получения индекса внутри родителя
DynamicAdapt.prototype.indexInParent = function (parent, element) {
  const array = Array.prototype.slice.call(parent.children);
  return Array.prototype.indexOf.call(array, element);
};

// Функция сортировки массива по breakpoint и place
// по возрастанию для this.type = min
// по убыванию для this.type = max
DynamicAdapt.prototype.arraySort = function (arr) {
  if (this.type === "min") {
    Array.prototype.sort.call(arr, function (a, b) {
      if (a.breakpoint === b.breakpoint) {
        if (a.place === b.place) {
          return 0;
        }

        if (a.place === "first" || b.place === "last") {
          return -1;
        }

        if (a.place === "last" || b.place === "first") {
          return 1;
        }

        return a.place - b.place;
      }

      return a.breakpoint - b.breakpoint;
    });
  } else {
    Array.prototype.sort.call(arr, function (a, b) {
      if (a.breakpoint === b.breakpoint) {
        if (a.place === b.place) {
          return 0;
        }

        if (a.place === "first" || b.place === "last") {
          return 1;
        }

        if (a.place === "last" || b.place === "first") {
          return -1;
        }

        return b.place - a.place;
      }

      return b.breakpoint - a.breakpoint;
    });
    return;
  }
};

const da = new DynamicAdapt("max");
da.init();

// слайдер на главной
const headerSlider = new Swiper(".header__slider", {
  // loop: true,
  autoplay: {
    delay: 5000,
  },
  speed: 1200,
  effect: "fade",
  fadeEffect: {
    crossFade: true,
  },
  // переключение при клике на слайд
  // slideToClickedSlide: true,
  // отключение прокрутки при наведении мыши
  // on: {
  //   init() {
  //     this.el.addEventListener("mouseenter", () => {
  //       this.autoplay.stop();
  //     });
  //     this.el.addEventListener("mouseleave", () => {
  //       this.autoplay.start();
  //     });
  //   },
  // },
  //
});
//----- END

// мобильное меню

//выпадающее меню для мобильных устройств
document.addEventListener("click", documentActions);

function documentActions(e) {
  const targetElement = e.target;
  if (window.innerWidth > 900) {
    if (targetElement.classList.contains("menu__arrow")) {
      targetElement.closest(".menu__item").classList.toggle("_hover");
    }
    if (
      !targetElement.closest(".menu__item") &&
      document.querySelectorAll(".menu__item._hover").length > 0
    ) {
      // console.log("ehhh");
      // _removeClasses(document.querySelectorAll(".menu__item._hover"), "_hover");
    }
  }
}

// проверка, является ли уствройство мобильным
const isMobile = {
  Android: function () {
    return navigator.userAgent.match(/Android/i);
  },
  BlackBerry: function () {
    return navigator.userAgent.match(/BlackBerry/i);
  },
  iOS: function () {
    return navigator.userAgent.match(/iPhone|iPad|iPod/i);
  },
  Opera: function () {
    return navigator.userAgent.match(/Opera Mini/i);
  },
  Windows: function () {
    return navigator.userAgent.match(/IEMobile/i);
  },
  any: function () {
    return (
      isMobile.Android() ||
      isMobile.BlackBerry() ||
      isMobile.iOS() ||
      isMobile.Opera() ||
      isMobile.Windows()
    );
  },
};

if (isMobile.any()) {
  // document.querySelector('html').classList.add('_touch');
  document.body.classList.add("_touch");
}

// меню бургер
const iconMenu = document.querySelector(".menu__icon");
const menuBody = document.querySelector(".menu__body");
const menuLink = document.querySelectorAll(".menu__item");
if (iconMenu) {
  iconMenu.addEventListener("click", function (e) {
    document.body.classList.toggle("_lock");
    iconMenu.classList.toggle("_active");
    menuBody.classList.toggle("_active");
  });
}
// закрытие при клике
menuLink.forEach((item) => {
  item.addEventListener("click", () => {
    document.body.classList.remove("_lock");
    iconMenu.classList.remove("_active");
    menuBody.classList.remove("_active");
  });
});

const player = document.querySelectorAll(".player"),
  playBtn = document.querySelectorAll(".player__play"),
  soundLaught = document.querySelectorAll(".player__sound-laught"),
  soundVolume = document.querySelectorAll(".player__sound input"),
  soundMute = document.querySelectorAll(".player__sound-mute");

// Play
function playSong(song) {
  let audio = song.parentNode.children[2];
  let icon = song.children[0];
  isPlaying();
  song.parentNode.classList.add("play");
  icon.src = "./images/icons/sprite.svg#pause";
  audio.play();
  audio.volume = 0.25;
  audio.addEventListener("ended", () => {
    icon.src = "./images/icons/sprite.svg#play";
  });
}
// Pause
function pauseSong(song) {
  let audio = song.parentNode.children[2];
  let icon = song.children[0];
  isPlaying();
  song.parentNode.classList.remove("play");
  icon.src = "./images/icons/sprite.svg#play";
  audio.pause();
}
// Delete class play if other sonf is playing
function isPlaying() {
  player.forEach((el) => {
    const isPlaying = el.classList.contains("play");
    const iconPlay = el.childNodes[1].children[0];
    iconPlay.src = "./images/icons/sprite.svg#play";
    if (isPlaying) {
      const elem = el.childNodes;
      elem[5].currentTime = 0;
      elem[5].pause();
      el.classList.remove("play");
    }
  });
}

playBtn.forEach((song) => {
  song.addEventListener("click", (e) => {
    const isPlaying = song.parentNode.classList.contains("play");
    if (isPlaying) {
      pauseSong(song);
    } else {
      playSong(song);
    }
  });
});

// Mute and Laught
soundMute.forEach((item) => {
  item.addEventListener("click", () => {
    let audio = item.parentNode.parentNode.children[2];
    let mute = item.children[0];
    let volume = item.parentNode.children[1];
    let laught = item.parentNode.children[2].children[0];
    mute.src = "./images/icons/sprite.svg#mute-full";
    volume.value = 0;
    laught.src = "./images/icons/sprite.svg#laught";
    audio.volume = 0;
  });
});

soundLaught.forEach((item) => {
  item.addEventListener("click", () => {
    let audio = item.parentNode.parentNode.children[2];
    let mute = item.parentNode.children[0].children[0];
    let volume = item.parentNode.children[1];
    let laught = item.children[0];
    mute.src = "./images/icons/sprite.svg#mute";
    volume.value = 100;
    laught.src = "./images/icons/sprite.svg#laught-full";
    audio.volume = 1;
  });
});

// Set volume
soundVolume.forEach((item) => {
  item.addEventListener("input", () => {
    let audio = item.parentNode.parentNode.children[2];
    let mute = item.parentNode.children[0].children[0];
    let laught = item.parentNode.children[2].children[0];
    audio.volume = item.value / 100;
    if (audio.volume == 0) {
      mute.src = "./images/icons/sprite.svg#mute-full";
      laught.src = "./images/icons/sprite.svg#laught";
    } else if (audio.volume > 0.75) {
      laught.src = "./images/icons/sprite.svg#laught-full";
    } else {
      mute.src = "./images/icons/sprite.svg#mute";
      laught.src = "./images/icons/sprite.svg#laught";
    }
  });
});

// слайдер отзывов
var reviewsSlider = new Swiper(".reviews__sliders", {
  loop: true,
  navigation: {
    nextEl: ".reviews-button--right",
    prevEl: ".reviews-button--left",
    clickable: true,
  },
  pagination: {
    el: ".swiper-pagination",
    type: "bullets",
    clickable: true,
  },
});
//----- END

//# sourceMappingURL=main.min.js.map
