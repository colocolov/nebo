// accordeon
document.addEventListener("DOMContentLoaded", () => {
  const accordeons = document.querySelectorAll(".accordeon__item");
  const accordeonBtn = document.querySelectorAll(".accordeon__title");
  const navLink = document.querySelectorAll(".menu__item");
  const pathname = window.location.pathname; // возвращает путь до текущей страницы
  const href = window.location.href; // возвращает полный адрес страницы
  const hrefLink = localStorage.getItem("hrefLink"); // записываем хеш в localStorage

  // переключение табов
  accordeonBtn.forEach((el) => {
    el.addEventListener("click", (e) => {
      // console.log(el);
      const self = e.currentTarget;
      // el.classList.remove("active");
      // const title = self.querySelector(".accordeon__name");
      // const content = self.querySelector(".accordeon__decription");

      for (let i = 0, parent; (parent = accordeons[i]); i++) {
        // console.log(parent);
        parent.classList.remove("active");
        parent.onclick = function (e) {
            // console.log(e);
          // console.log(e.target.className + "--");
          if ((e.target.className == "accordeon__title") || (e.target.className == "btn") || (e.target.className == "accordeon__head")) {
            this.classList.toggle("active");
          //   // alert(this.className);
            if (this.classList.contains('active')) {
              // секция всегда начинается с верха экрана
              this.scrollIntoView({ behavior: 'smooth', block: 'start' });
            }
          }
        };
      }

      // .self.classList.toggle("active");
    });
  });
  // END переключение табов

  // закрытие мобильного меню
  navLink.forEach((item) => {
    item.addEventListener("click", () => {
      // let url = item.baseURI;
      let hash = item.childNodes[1].innerText;
      // console.log(hash);
      // console.log(hash.toLowerCase());

      accordeons.forEach((el) => {
        el.classList.remove("active"); // получают элементы меню
        const isCob = el.classList.contains(hash.toLowerCase());

        if (pathname != '/index.html') {
          localStorage.setItem("hrefLink", hash.toLowerCase());
          // alert(ркуа);
        } else {
          while (isCob) {
            el.classList.add("active");
            break;
          }
          localStorage.removeItem('hrefLink');
        }
      });
    });
  });
  // END закрытие мобильного меню

  // проверка если мы перешли с другой страницы с хешем и открываем нужную секцию
  if (href.includes('#')) { // если мы на главной с хешем
      for (let i = 0, parent; (parent = accordeons[i]); i++) {
        parent.classList.remove("active");
        if (parent.classList.contains(hrefLink)) {
          parent.classList.add('active');
        }
      }
  } else {
    localStorage.removeItem('hrefLink');
  }
  // END проверки на хэш

});
// ----- END

// Dynamic Adapt v.1
// HTML data-da="where(uniq class name),when(breakpoint),position(digi)"
// e.x. data-da=".item,992,2"
// Andrikanych Yevhen 2020
// https://www.youtube.com/c/freelancerlifestyle

"use strict";

function DynamicAdapt(type) {
  this.type = type;
}

DynamicAdapt.prototype.init = function () {
  const _this = this;
  // массив объектов
  this.оbjects = [];
  this.daClassname = "_dynamic_adapt_";
  // массив DOM-элементов
  this.nodes = document.querySelectorAll("[data-da]");

  // наполнение оbjects объктами
  for (let i = 0; i < this.nodes.length; i++) {
    const node = this.nodes[i];
    const data = node.dataset.da.trim();
    const dataArray = data.split(",");
    const оbject = {};
    оbject.element = node;
    оbject.parent = node.parentNode;
    оbject.destination = document.querySelector(dataArray[0].trim());
    оbject.breakpoint = dataArray[1] ? dataArray[1].trim() : "767";
    оbject.place = dataArray[2] ? dataArray[2].trim() : "last";
    оbject.index = this.indexInParent(оbject.parent, оbject.element);
    this.оbjects.push(оbject);
  }

  this.arraySort(this.оbjects);

  // массив уникальных медиа-запросов
  this.mediaQueries = Array.prototype.map.call(
    this.оbjects,
    function (item) {
      return (
        "(" +
        this.type +
        "-width: " +
        item.breakpoint +
        "px)," +
        item.breakpoint
      );
    },
    this
  );
  this.mediaQueries = Array.prototype.filter.call(
    this.mediaQueries,
    function (item, index, self) {
      return Array.prototype.indexOf.call(self, item) === index;
    }
  );

  // навешивание слушателя на медиа-запрос
  // и вызов обработчика при первом запуске
  for (let i = 0; i < this.mediaQueries.length; i++) {
    const media = this.mediaQueries[i];
    const mediaSplit = String.prototype.split.call(media, ",");
    const matchMedia = window.matchMedia(mediaSplit[0]);
    const mediaBreakpoint = mediaSplit[1];

    // массив объектов с подходящим брейкпоинтом
    const оbjectsFilter = Array.prototype.filter.call(
      this.оbjects,
      function (item) {
        return item.breakpoint === mediaBreakpoint;
      }
    );
    matchMedia.addListener(function () {
      _this.mediaHandler(matchMedia, оbjectsFilter);
    });
    this.mediaHandler(matchMedia, оbjectsFilter);
  }
};

DynamicAdapt.prototype.mediaHandler = function (matchMedia, оbjects) {
  if (matchMedia.matches) {
    for (let i = 0; i < оbjects.length; i++) {
      const оbject = оbjects[i];
      оbject.index = this.indexInParent(оbject.parent, оbject.element);
      this.moveTo(оbject.place, оbject.element, оbject.destination);
    }
  } else {
    for (let i = 0; i < оbjects.length; i++) {
      const оbject = оbjects[i];
      if (оbject.element.classList.contains(this.daClassname)) {
        this.moveBack(оbject.parent, оbject.element, оbject.index);
      }
    }
  }
};

// Функция перемещения
DynamicAdapt.prototype.moveTo = function (place, element, destination) {
  element.classList.add(this.daClassname);
  if (place === "last" || place >= destination.children.length) {
    destination.insertAdjacentElement("beforeend", element);
    return;
  }
  if (place === "first") {
    destination.insertAdjacentElement("afterbegin", element);
    return;
  }
  destination.children[place].insertAdjacentElement("beforebegin", element);
};

// Функция возврата
DynamicAdapt.prototype.moveBack = function (parent, element, index) {
  element.classList.remove(this.daClassname);
  if (parent.children[index] !== undefined) {
    parent.children[index].insertAdjacentElement("beforebegin", element);
  } else {
    parent.insertAdjacentElement("beforeend", element);
  }
};

// Функция получения индекса внутри родителя
DynamicAdapt.prototype.indexInParent = function (parent, element) {
  const array = Array.prototype.slice.call(parent.children);
  return Array.prototype.indexOf.call(array, element);
};

// Функция сортировки массива по breakpoint и place
// по возрастанию для this.type = min
// по убыванию для this.type = max
DynamicAdapt.prototype.arraySort = function (arr) {
  if (this.type === "min") {
    Array.prototype.sort.call(arr, function (a, b) {
      if (a.breakpoint === b.breakpoint) {
        if (a.place === b.place) {
          return 0;
        }

        if (a.place === "first" || b.place === "last") {
          return -1;
        }

        if (a.place === "last" || b.place === "first") {
          return 1;
        }

        return a.place - b.place;
      }

      return a.breakpoint - b.breakpoint;
    });
  } else {
    Array.prototype.sort.call(arr, function (a, b) {
      if (a.breakpoint === b.breakpoint) {
        if (a.place === b.place) {
          return 0;
        }

        if (a.place === "first" || b.place === "last") {
          return 1;
        }

        if (a.place === "last" || b.place === "first") {
          return -1;
        }

        return b.place - a.place;
      }

      return b.breakpoint - a.breakpoint;
    });
    return;
  }
};

const da = new DynamicAdapt("max");
da.init();

const donateBtn = document.querySelector('.donate__btn');
// const wrapper = document.querySelector('.wrapper');
const donateSelect = document.querySelector('.donate__btn-select');
// const donateSelect2 = document.querySelector('.donate__btn-select._active');
const donateCoffee = document.querySelector('.donate__btn-coffee');
const donatePaypal = document.querySelector('.donate__btn-paypal');


donateBtn.addEventListener("click", (e) => {
  e.preventDefault();
  // document.body.classList.add('_lock');
  // wrapper.classList.add('_active');
  donateSelect.classList.toggle('_active');
});

donatePaypal.addEventListener('click', () => {
  // document.body.classList.remove('_lock');
  // wrapper.classList.remove('_active');
  donateSelect.classList.remove('_active');
});

donateCoffee.addEventListener('click', () => {
  // document.body.classList.remove('_lock');
  // wrapper.classList.remove('_active');
  donateSelect.classList.remove('_active');
});

document.addEventListener('click', (e) => {
  // console.log(e.target.className);

  if (e.target.className != "donate__btn"){
    // console.log("11");
    // if (!donateSelect2) {
      // document.body.classList.remove('_lock');
      // wrapper.classList.remove('_active');
      donateSelect.classList.remove('_active');
    // }
  }
});

// слайдер на главной
const headerSlider = new Swiper(".header__slider", {
  // loop: true,
  autoplay: {
    delay: 5000,
  },
  speed: 1200,
  effect: "fade",
  fadeEffect: {
    crossFade: true,
  },
  // переключение при клике на слайд
  // slideToClickedSlide: true,
  // отключение прокрутки при наведении мыши
  // on: {
  //   init() {
  //     this.el.addEventListener("mouseenter", () => {
  //       this.autoplay.stop();
  //     });
  //     this.el.addEventListener("mouseleave", () => {
  //       this.autoplay.start();
  //     });
  //   },
  // },
  //
});
//----- END

// мобильное меню

//выпадающее меню для мобильных устройств
document.addEventListener("click", documentActions);

function documentActions(e) {
  const targetElement = e.target;
  if (window.innerWidth > 900) {
    if (targetElement.classList.contains("menu__arrow")) {
      targetElement.closest(".menu__item").classList.toggle("_hover");
    }
    if (
      !targetElement.closest(".menu__item") &&
      document.querySelectorAll(".menu__item._hover").length > 0
    ) {
      // console.log("ehhh");
      // _removeClasses(document.querySelectorAll(".menu__item._hover"), "_hover");
    }
  }
}

// проверка, является ли уствройство мобильным
const isMobile = {
  Android: function () {
    return navigator.userAgent.match(/Android/i);
  },
  BlackBerry: function () {
    return navigator.userAgent.match(/BlackBerry/i);
  },
  iOS: function () {
    return navigator.userAgent.match(/iPhone|iPad|iPod/i);
  },
  Opera: function () {
    return navigator.userAgent.match(/Opera Mini/i);
  },
  Windows: function () {
    return navigator.userAgent.match(/IEMobile/i);
  },
  any: function () {
    return (
      isMobile.Android() ||
      isMobile.BlackBerry() ||
      isMobile.iOS() ||
      isMobile.Opera() ||
      isMobile.Windows()
    );
  },
};

if (isMobile.any()) {
  // document.querySelector('html').classList.add('_touch');
  document.body.classList.add("_touch");
}

// меню бургер
const iconMenu = document.querySelector(".menu__icon");
const menuBody = document.querySelector(".menu__body");
const menuLink = document.querySelectorAll(".menu__item");
if (iconMenu) {
  iconMenu.addEventListener("click", function (e) {
    document.body.classList.toggle("_lock");
    iconMenu.classList.toggle("_active");
    menuBody.classList.toggle("_active");
  });
}
// закрытие при клике
menuLink.forEach((item) => {
  item.addEventListener("click", () => {
    document.body.classList.remove("_lock");
    iconMenu.classList.remove("_active");
    menuBody.classList.remove("_active");
  });
});

document.querySelectorAll(".player").forEach((player) => {
  const audio = player.querySelector(".player__audio");
  const playBtn = player.querySelector(".player__play-src");
  const title = player.querySelector(".player__title");
  const progressBar = player.querySelector(".player__progress-bar");
  const muteBtn = player.querySelector(".player__sound-muteicon");
  const volumeSlider = player.querySelector(".player__sound-volume");
  const maxVolumeBtn = player.querySelector(".player__sound-laughticon");

  // Play/Pause
  function togglePlayPause() {
    const isPlaying = player.classList.contains("play");
    if (isPlaying) {
      audio.pause();
      player.classList.remove("play");
      playBtn.src = "./images/icons/sprite.svg#play";
    } else {
      stopAllPlayers();
      audio.play();
      player.classList.add("play");
      playBtn.src = "./images/icons/sprite.svg#pause";
    }
  }

  // Остановка других плееров
  function stopAllPlayers() {
    document.querySelectorAll(".player").forEach((otherPlayer) => {
      if (otherPlayer !== player) {
        otherPlayer.classList.remove("play");
        const otherAudio = otherPlayer.querySelector(".player__audio");
        const otherPlayBtn = otherPlayer.querySelector(".player__play-src");
        otherAudio.pause();
        otherAudio.currentTime = 0;
        otherPlayBtn.src = "./images/icons/sprite.svg#play";
      }
    });
  }

  // Mute
  function toggleMute() {
    audio.volume = 0;
    volumeSlider.value = 0;
    muteBtn.src = "./images/icons/sprite.svg#mute-full";
    maxVolumeBtn.src = "./images/icons/sprite.svg#laught";
  }

  // Max Volume
  function setMaxVolume() {
    audio.volume = 1;
    volumeSlider.value = 100;
    muteBtn.src = "./images/icons/sprite.svg#mute";
    maxVolumeBtn.src = "./images/icons/sprite.svg#laught-full";
  }

  // Volume Control
  function updateVolume() {
    audio.volume = volumeSlider.value / 100;
    if (audio.volume === 0) {
      muteBtn.src = "./images/icons/sprite.svg#mute-full";
      maxVolumeBtn.src = "./images/icons/sprite.svg#laught";
    } else if (audio.volume > 0.75) {
      maxVolumeBtn.src = "./images/icons/sprite.svg#laught-full";
    } else {
      muteBtn.src = "./images/icons/sprite.svg#mute";
      maxVolumeBtn.src = "./images/icons/sprite.svg#laught";
    }
  }

  // Update Progress Bar
  function updateProgress() {
    if (progressBar) { // Проверка, что progressBar существует
      const progressPercent = (audio.currentTime / audio.duration) * 100;
      progressBar.style.width = `${progressPercent}%`;
    }
  }

  // Event listeners
  player.querySelector(".player__play").addEventListener("click", togglePlayPause);
  player.querySelector(".player__sound-mute").addEventListener("click", toggleMute);
  player.querySelector(".player__sound-laught").addEventListener("click", setMaxVolume);
  volumeSlider.addEventListener("input", updateVolume);

  // Update progress bar as audio plays
  audio.addEventListener("timeupdate", updateProgress);

  // Reset play icon and progress bar when audio ends
  audio.addEventListener("ended", () => {
    playBtn.src = "./images/icons/sprite.svg#play";
    player.classList.remove("play");
    if (progressBar) {
      progressBar.style.width = "0%";
    }
  });
});

//# sourceMappingURL=main.min.js.map
